import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;

public class JavaFilesMappingToExcelJExcelApi {
    private static String checkDuplicated = "Y"; // Default is "Y", change to "N" if needed


    public static void main(String[] args) {
        List<String> mainRepoFiles = new ArrayList<>();
//        mainRepoFiles.add("C:\\Users\\selva\\Downloads\\Sample_Files\\mainrepo1.txt");
//        mainRepoFiles.add("C:\\Users\\selva\\Downloads\\Sample_Files\\mainrepo2.txt");

        try {
            BufferedReader fileListReader = new BufferedReader(new FileReader("C:\\Users\\selva\\Downloads\\Sample_Files\\main_repo_files_list.txt"));
            String repoFilePath;
            while ((repoFilePath = fileListReader.readLine()) != null) {
                mainRepoFiles.add(repoFilePath);
            }
            fileListReader.close();

            // Rest of your code remains the same

        } catch (Exception e) {
            e.printStackTrace();
        }
        // Add more main repo files as needed

        Map<String, List<String>> pathToReposMap = new HashMap<>();
        List<String> repoFileNames = new ArrayList<>();

        try {
            BufferedReader repoReader = new BufferedReader(new FileReader("C:\\Users\\selva\\Downloads\\Sample_Files\\repo_paths.txt"));
            String repoLine;
            while ((repoLine = repoReader.readLine()) != null) {
                readRepoFileAndPopulateMaps(pathToReposMap, repoFileNames, repoLine);
            }
            repoReader.close();



            WritableWorkbook workbook = Workbook.createWorkbook(new File("C:\\Users\\selva\\Downloads\\Sample_Files\\java_files_mapping.xls"));


            for (String mainRepoFile : mainRepoFiles) {
                String sheetName = mainRepoFile.substring(mainRepoFile.lastIndexOf("\\") + 1, mainRepoFile.lastIndexOf("."));
                WritableSheet sheet = workbook.createSheet(sheetName, workbook.getNumberOfSheets());

                BufferedReader reader = new BufferedReader(new FileReader(mainRepoFile));
                String line;
                int rowIndex = 1;
                Label headerLabelA = new Label(0, 0, "FileSourcePath");
                Label headerLabelB = new Label(1, 0, "MappedRepo");
                sheet.addCell(headerLabelA);
                sheet.addCell(headerLabelB);
                Set<String> keysProcessed = new HashSet<>(); // To track processed keys across repositories

                while ((line = reader.readLine()) != null) {
                    String fullPath = line.trim().replace("\\", "/");
                    String[] parts = fullPath.split("/");
                    if (parts.length > 0) {
                        String fileName = parts[parts.length - 1];
                        String parentFolder = parts[parts.length - 2];
                        String key = parentFolder + "/" + fileName;

                        if (!keysProcessed.contains(key)) {
                            List<String> movedToRepos = pathToReposMap.getOrDefault(key, new ArrayList<>());

                            boolean foundInRepo = false;
                            for (String repo : movedToRepos) {
                                if (repoFileNames.contains(repo)) {
                                    foundInRepo = true;
                                    break;
                                }
                            }

                            String packageStructure = key; // Construct the complete package structure

                            Label label0 = new Label(0, rowIndex, fullPath);
                            Label label1 = new Label(2, rowIndex, fileName);
                            Label label2 = new Label(1, rowIndex, String.join(", ", movedToRepos)); // Display repo names
                            Label label3 = new Label(3, rowIndex, packageStructure);

                            if (foundInRepo && "N".equalsIgnoreCase(checkDuplicated)) {
                                keysProcessed.add(key); // Mark this key as processed
                                sheet.addCell(label0);
//                                sheet.addCell(label1);
                                sheet.addCell(label2);
//                                sheet.addCell(label3);
                                rowIndex++;
//                            System.out.println("Added labels to sheet");

                            } else if (!foundInRepo || !"N".equalsIgnoreCase(checkDuplicated)) {
                                sheet.addCell(label0);
//                                sheet.addCell(label1);
                                sheet.addCell(label2);
//                                sheet.addCell(label3);
                                rowIndex++;
//                            System.out.println("Added labels to sheet");
                            }

                            keysProcessed.add(key); // Mark this key as processed
                        }

                    }
                }

                reader.close();
            }

            workbook.write();
            workbook.close();

            System.out.println("Excel file created successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void readRepoFileAndPopulateMaps(
            Map<String, List<String>> pathToReposMap,
            List<String> repoFileNames,
            String repoFileName) {
        try {
            String repo = repoFileName.substring(repoFileName.lastIndexOf("\\") + 1);

            BufferedReader reader = new BufferedReader(new FileReader(repoFileName));
            String repoPath = reader.readLine().trim().replace("\\", "/");
            reader.close();

            repoFileNames.add(repo);

            reader = new BufferedReader(new FileReader(repoFileName));
            String line;
            while ((line = reader.readLine()) != null) {
                String fullPath = line.trim().replace("\\", "/");
                String[] parts = fullPath.split("/");
                if (parts.length > 0) {
                    String fileName = parts[parts.length - 1];
                    String parentFolder = parts[parts.length - 2];
                    String key = parentFolder + "/" + fileName;
                    pathToReposMap.computeIfAbsent(key, k -> new ArrayList<>()).add(repo);
                }
            }
            reader.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
